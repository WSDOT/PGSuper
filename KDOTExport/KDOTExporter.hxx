// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SCHEMA_KDOTEXPORTER_HXX
#define SCHEMA_KDOTEXPORTER_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< wchar_t, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< wchar_t, string > normalized_string;
  typedef ::xsd::cxx::tree::token< wchar_t, normalized_string > token;
  typedef ::xsd::cxx::tree::name< wchar_t, token > name;
  typedef ::xsd::cxx::tree::nmtoken< wchar_t, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< wchar_t, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< wchar_t, name > ncname;
  typedef ::xsd::cxx::tree::language< wchar_t, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< wchar_t, ncname > id;
  typedef ::xsd::cxx::tree::idref< wchar_t, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< wchar_t, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< wchar_t, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< wchar_t, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< wchar_t > buffer;
  typedef ::xsd::cxx::tree::base64_binary< wchar_t, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< wchar_t, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< wchar_t, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< wchar_t, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< wchar_t, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< wchar_t, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< wchar_t, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< wchar_t, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< wchar_t, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< wchar_t, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< wchar_t, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< wchar_t, ncname > entity;
  typedef ::xsd::cxx::tree::entities< wchar_t, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< wchar_t > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< wchar_t > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< wchar_t > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< wchar_t > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< wchar_t > error;
  typedef ::xsd::cxx::tree::diagnostics< wchar_t > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< wchar_t > exception;
  typedef ::xsd::cxx::tree::bounds< wchar_t > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< wchar_t > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< wchar_t > parsing;
  typedef ::xsd::cxx::tree::expected_element< wchar_t > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< wchar_t > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< wchar_t > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< wchar_t > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< wchar_t > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< wchar_t > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< wchar_t > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< wchar_t > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace KDOT
{
  class IndexType1;
  class GirderKeyType;
  class NamedDoubleType;
  class Point2DType;
  class DebondDataType;
  class StrandExtensionDataType;
  class HarpingPointDataType;
  class PierDataType;
  class PrestressingStrandType;
  class RebarMaterialType;
  class RebarRowInstanceType;
  class StirrupZoneType;
  class CamberResultType;
  class GirderDataType;
  class BridgeDataType;
  class KDOTExport;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace KDOT
{
  class IndexType1: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    IndexType1 ();

    IndexType1 (const ::xml_schema::integer&);

    IndexType1 (const xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    IndexType1 (const xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    IndexType1 (const ::std::wstring& s,
                const xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    IndexType1 (const IndexType1& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual IndexType1*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~IndexType1 ();
  };

  class GirderKeyType: public ::xml_schema::type
  {
    public:
    // SpanIndex
    // 
    typedef ::xml_schema::non_negative_integer SpanIndex_type;
    typedef ::xsd::cxx::tree::traits< SpanIndex_type, wchar_t > SpanIndex_traits;

    const SpanIndex_type&
    SpanIndex () const;

    SpanIndex_type&
    SpanIndex ();

    void
    SpanIndex (const SpanIndex_type& x);

    // GirderIndex
    // 
    typedef ::xml_schema::non_negative_integer GirderIndex_type;
    typedef ::xsd::cxx::tree::traits< GirderIndex_type, wchar_t > GirderIndex_traits;

    const GirderIndex_type&
    GirderIndex () const;

    GirderIndex_type&
    GirderIndex ();

    void
    GirderIndex (const GirderIndex_type& x);

    // Constructors.
    //
    GirderKeyType ();

    GirderKeyType (const SpanIndex_type&,
                   const GirderIndex_type&);

    GirderKeyType (const xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    GirderKeyType (const GirderKeyType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual GirderKeyType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~GirderKeyType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< SpanIndex_type > SpanIndex_;
    ::xsd::cxx::tree::one< GirderIndex_type > GirderIndex_;
  };

  class NamedDoubleType: public ::xml_schema::type
  {
    public:
    // ParameterName
    // 
    typedef ::xml_schema::string ParameterName_type;
    typedef ::xsd::cxx::tree::traits< ParameterName_type, wchar_t > ParameterName_traits;

    const ParameterName_type&
    ParameterName () const;

    ParameterName_type&
    ParameterName ();

    void
    ParameterName (const ParameterName_type& x);

    void
    ParameterName (::std::auto_ptr< ParameterName_type > p);

    // Value
    // 
    typedef ::xml_schema::double_ Value_type;
    typedef ::xsd::cxx::tree::traits< Value_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Value_traits;

    const Value_type&
    Value () const;

    Value_type&
    Value ();

    void
    Value (const Value_type& x);

    // Constructors.
    //
    NamedDoubleType ();

    NamedDoubleType (const ParameterName_type&,
                     const Value_type&);

    NamedDoubleType (const xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    NamedDoubleType (const NamedDoubleType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual NamedDoubleType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~NamedDoubleType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< ParameterName_type > ParameterName_;
    ::xsd::cxx::tree::one< Value_type > Value_;
  };

  class Point2DType: public ::xml_schema::type
  {
    public:
    // X
    // 
    typedef ::xml_schema::double_ X_type;
    typedef ::xsd::cxx::tree::traits< X_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > X_traits;

    const X_type&
    X () const;

    X_type&
    X ();

    void
    X (const X_type& x);

    // Y
    // 
    typedef ::xml_schema::double_ Y_type;
    typedef ::xsd::cxx::tree::traits< Y_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Y_traits;

    const Y_type&
    Y () const;

    Y_type&
    Y ();

    void
    Y (const Y_type& x);

    // Constructors.
    //
    Point2DType ();

    Point2DType (const X_type&,
                 const Y_type&);

    Point2DType (const xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    Point2DType (const Point2DType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual Point2DType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Point2DType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< X_type > X_;
    ::xsd::cxx::tree::one< Y_type > Y_;
  };

  class DebondDataType: public ::xml_schema::type
  {
    public:
    // StrandIndex
    // 
    typedef ::xml_schema::non_negative_integer StrandIndex_type;
    typedef ::xsd::cxx::tree::traits< StrandIndex_type, wchar_t > StrandIndex_traits;

    const StrandIndex_type&
    StrandIndex () const;

    StrandIndex_type&
    StrandIndex ();

    void
    StrandIndex (const StrandIndex_type& x);

    // StartDebondLength
    // 
    typedef ::xml_schema::double_ StartDebondLength_type;
    typedef ::xsd::cxx::tree::traits< StartDebondLength_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > StartDebondLength_traits;

    const StartDebondLength_type&
    StartDebondLength () const;

    StartDebondLength_type&
    StartDebondLength ();

    void
    StartDebondLength (const StartDebondLength_type& x);

    // EndDebondLength
    // 
    typedef ::xml_schema::double_ EndDebondLength_type;
    typedef ::xsd::cxx::tree::traits< EndDebondLength_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > EndDebondLength_traits;

    const EndDebondLength_type&
    EndDebondLength () const;

    EndDebondLength_type&
    EndDebondLength ();

    void
    EndDebondLength (const EndDebondLength_type& x);

    // Constructors.
    //
    DebondDataType ();

    DebondDataType (const StrandIndex_type&,
                    const StartDebondLength_type&,
                    const EndDebondLength_type&);

    DebondDataType (const xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    DebondDataType (const DebondDataType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual DebondDataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~DebondDataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< StrandIndex_type > StrandIndex_;
    ::xsd::cxx::tree::one< StartDebondLength_type > StartDebondLength_;
    ::xsd::cxx::tree::one< EndDebondLength_type > EndDebondLength_;
  };

  class StrandExtensionDataType: public ::xml_schema::type
  {
    public:
    // StrandIndex
    // 
    typedef ::xml_schema::non_negative_integer StrandIndex_type;
    typedef ::xsd::cxx::tree::traits< StrandIndex_type, wchar_t > StrandIndex_traits;

    const StrandIndex_type&
    StrandIndex () const;

    StrandIndex_type&
    StrandIndex ();

    void
    StrandIndex (const StrandIndex_type& x);

    // IsStartExtended
    // 
    typedef ::xml_schema::boolean IsStartExtended_type;
    typedef ::xsd::cxx::tree::traits< IsStartExtended_type, wchar_t > IsStartExtended_traits;

    const IsStartExtended_type&
    IsStartExtended () const;

    IsStartExtended_type&
    IsStartExtended ();

    void
    IsStartExtended (const IsStartExtended_type& x);

    // IsEndExtended
    // 
    typedef ::xml_schema::boolean IsEndExtended_type;
    typedef ::xsd::cxx::tree::traits< IsEndExtended_type, wchar_t > IsEndExtended_traits;

    const IsEndExtended_type&
    IsEndExtended () const;

    IsEndExtended_type&
    IsEndExtended ();

    void
    IsEndExtended (const IsEndExtended_type& x);

    // Constructors.
    //
    StrandExtensionDataType ();

    StrandExtensionDataType (const StrandIndex_type&,
                             const IsStartExtended_type&,
                             const IsEndExtended_type&);

    StrandExtensionDataType (const xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    StrandExtensionDataType (const StrandExtensionDataType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual StrandExtensionDataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~StrandExtensionDataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< StrandIndex_type > StrandIndex_;
    ::xsd::cxx::tree::one< IsStartExtended_type > IsStartExtended_;
    ::xsd::cxx::tree::one< IsEndExtended_type > IsEndExtended_;
  };

  class HarpingPointDataType: public ::xml_schema::type
  {
    public:
    // Location
    // 
    typedef ::xml_schema::double_ Location_type;
    typedef ::xsd::cxx::tree::traits< Location_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Location_traits;

    const Location_type&
    Location () const;

    Location_type&
    Location ();

    void
    Location (const Location_type& x);

    // HoldDownForce
    // 
    typedef ::xml_schema::double_ HoldDownForce_type;
    typedef ::xsd::cxx::tree::traits< HoldDownForce_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > HoldDownForce_traits;

    const HoldDownForce_type&
    HoldDownForce () const;

    HoldDownForce_type&
    HoldDownForce ();

    void
    HoldDownForce (const HoldDownForce_type& x);

    // Constructors.
    //
    HarpingPointDataType ();

    HarpingPointDataType (const Location_type&,
                          const HoldDownForce_type&);

    HarpingPointDataType (const xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    HarpingPointDataType (const HarpingPointDataType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual HarpingPointDataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~HarpingPointDataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Location_type > Location_;
    ::xsd::cxx::tree::one< HoldDownForce_type > HoldDownForce_;
  };

  class PierDataType: public ::xml_schema::type
  {
    public:
    // Station
    // 
    typedef ::xml_schema::double_ Station_type;
    typedef ::xsd::cxx::tree::traits< Station_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Station_traits;

    const Station_type&
    Station () const;

    Station_type&
    Station ();

    void
    Station (const Station_type& x);

    // Skew
    // 
    typedef ::xml_schema::double_ Skew_type;
    typedef ::xsd::cxx::tree::traits< Skew_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Skew_traits;

    const Skew_type&
    Skew () const;

    Skew_type&
    Skew ();

    void
    Skew (const Skew_type& x);

    // backGirderEndOffset
    // 
    typedef ::xml_schema::double_ backGirderEndOffset_type;
    typedef ::xsd::cxx::tree::traits< backGirderEndOffset_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > backGirderEndOffset_traits;

    const backGirderEndOffset_type&
    backGirderEndOffset () const;

    backGirderEndOffset_type&
    backGirderEndOffset ();

    void
    backGirderEndOffset (const backGirderEndOffset_type& x);

    // aheadGirderEndOffset
    // 
    typedef ::xml_schema::double_ aheadGirderEndOffset_type;
    typedef ::xsd::cxx::tree::traits< aheadGirderEndOffset_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > aheadGirderEndOffset_traits;

    const aheadGirderEndOffset_type&
    aheadGirderEndOffset () const;

    aheadGirderEndOffset_type&
    aheadGirderEndOffset ();

    void
    aheadGirderEndOffset (const aheadGirderEndOffset_type& x);

    // Constructors.
    //
    PierDataType ();

    PierDataType (const Station_type&,
                  const Skew_type&,
                  const backGirderEndOffset_type&,
                  const aheadGirderEndOffset_type&);

    PierDataType (const xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    PierDataType (const PierDataType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual PierDataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~PierDataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Station_type > Station_;
    ::xsd::cxx::tree::one< Skew_type > Skew_;
    ::xsd::cxx::tree::one< backGirderEndOffset_type > backGirderEndOffset_;
    ::xsd::cxx::tree::one< aheadGirderEndOffset_type > aheadGirderEndOffset_;
  };

  class PrestressingStrandType: public ::xml_schema::type
  {
    public:
    // Name
    // 
    typedef ::xml_schema::string Name_type;
    typedef ::xsd::cxx::tree::traits< Name_type, wchar_t > Name_traits;

    const Name_type&
    Name () const;

    Name_type&
    Name ();

    void
    Name (const Name_type& x);

    void
    Name (::std::auto_ptr< Name_type > p);

    // NominalDiameter
    // 
    typedef ::xml_schema::double_ NominalDiameter_type;
    typedef ::xsd::cxx::tree::traits< NominalDiameter_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > NominalDiameter_traits;

    const NominalDiameter_type&
    NominalDiameter () const;

    NominalDiameter_type&
    NominalDiameter ();

    void
    NominalDiameter (const NominalDiameter_type& x);

    // Constructors.
    //
    PrestressingStrandType ();

    PrestressingStrandType (const Name_type&,
                            const NominalDiameter_type&);

    PrestressingStrandType (const xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    PrestressingStrandType (const PrestressingStrandType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual PrestressingStrandType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~PrestressingStrandType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Name_type > Name_;
    ::xsd::cxx::tree::one< NominalDiameter_type > NominalDiameter_;
  };

  class RebarMaterialType: public ::xml_schema::type
  {
    public:
    // Grade
    // 
    typedef ::xml_schema::string Grade_type;
    typedef ::xsd::cxx::tree::traits< Grade_type, wchar_t > Grade_traits;

    const Grade_type&
    Grade () const;

    Grade_type&
    Grade ();

    void
    Grade (const Grade_type& x);

    void
    Grade (::std::auto_ptr< Grade_type > p);

    // Type
    // 
    typedef ::xml_schema::string Type_type;
    typedef ::xsd::cxx::tree::traits< Type_type, wchar_t > Type_traits;

    const Type_type&
    Type () const;

    Type_type&
    Type ();

    void
    Type (const Type_type& x);

    void
    Type (::std::auto_ptr< Type_type > p);

    // Constructors.
    //
    RebarMaterialType ();

    RebarMaterialType (const Grade_type&,
                       const Type_type&);

    RebarMaterialType (const xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    RebarMaterialType (const RebarMaterialType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual RebarMaterialType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~RebarMaterialType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Grade_type > Grade_;
    ::xsd::cxx::tree::one< Type_type > Type_;
  };

  class RebarRowInstanceType: public ::xml_schema::type
  {
    public:
    // BarStart
    // 
    typedef ::xml_schema::double_ BarStart_type;
    typedef ::xsd::cxx::tree::traits< BarStart_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > BarStart_traits;

    const BarStart_type&
    BarStart () const;

    BarStart_type&
    BarStart ();

    void
    BarStart (const BarStart_type& x);

    // BarEnd
    // 
    typedef ::xml_schema::double_ BarEnd_type;
    typedef ::xsd::cxx::tree::traits< BarEnd_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > BarEnd_traits;

    const BarEnd_type&
    BarEnd () const;

    BarEnd_type&
    BarEnd ();

    void
    BarEnd (const BarEnd_type& x);

    // Face
    // 
    typedef ::xml_schema::string Face_type;
    typedef ::xsd::cxx::tree::traits< Face_type, wchar_t > Face_traits;

    const Face_type&
    Face () const;

    Face_type&
    Face ();

    void
    Face (const Face_type& x);

    void
    Face (::std::auto_ptr< Face_type > p);

    // Cover
    // 
    typedef ::xml_schema::double_ Cover_type;
    typedef ::xsd::cxx::tree::traits< Cover_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Cover_traits;

    const Cover_type&
    Cover () const;

    Cover_type&
    Cover ();

    void
    Cover (const Cover_type& x);

    // NumberOfBars
    // 
    typedef ::xml_schema::integer NumberOfBars_type;
    typedef ::xsd::cxx::tree::traits< NumberOfBars_type, wchar_t > NumberOfBars_traits;

    const NumberOfBars_type&
    NumberOfBars () const;

    NumberOfBars_type&
    NumberOfBars ();

    void
    NumberOfBars (const NumberOfBars_type& x);

    // Spacing
    // 
    typedef ::xml_schema::double_ Spacing_type;
    typedef ::xsd::cxx::tree::traits< Spacing_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Spacing_traits;

    const Spacing_type&
    Spacing () const;

    Spacing_type&
    Spacing ();

    void
    Spacing (const Spacing_type& x);

    // Size
    // 
    typedef ::xml_schema::string Size_type;
    typedef ::xsd::cxx::tree::traits< Size_type, wchar_t > Size_traits;

    const Size_type&
    Size () const;

    Size_type&
    Size ();

    void
    Size (const Size_type& x);

    void
    Size (::std::auto_ptr< Size_type > p);

    // Constructors.
    //
    RebarRowInstanceType ();

    RebarRowInstanceType (const BarStart_type&,
                          const BarEnd_type&,
                          const Face_type&,
                          const Cover_type&,
                          const NumberOfBars_type&,
                          const Spacing_type&,
                          const Size_type&);

    RebarRowInstanceType (const xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    RebarRowInstanceType (const RebarRowInstanceType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual RebarRowInstanceType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~RebarRowInstanceType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< BarStart_type > BarStart_;
    ::xsd::cxx::tree::one< BarEnd_type > BarEnd_;
    ::xsd::cxx::tree::one< Face_type > Face_;
    ::xsd::cxx::tree::one< Cover_type > Cover_;
    ::xsd::cxx::tree::one< NumberOfBars_type > NumberOfBars_;
    ::xsd::cxx::tree::one< Spacing_type > Spacing_;
    ::xsd::cxx::tree::one< Size_type > Size_;
  };

  class StirrupZoneType: public ::xml_schema::type
  {
    public:
    // StartLocation
    // 
    typedef ::xml_schema::double_ StartLocation_type;
    typedef ::xsd::cxx::tree::traits< StartLocation_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > StartLocation_traits;

    const StartLocation_type&
    StartLocation () const;

    StartLocation_type&
    StartLocation ();

    void
    StartLocation (const StartLocation_type& x);

    // EndLocation
    // 
    typedef ::xml_schema::double_ EndLocation_type;
    typedef ::xsd::cxx::tree::traits< EndLocation_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > EndLocation_traits;

    const EndLocation_type&
    EndLocation () const;

    EndLocation_type&
    EndLocation ();

    void
    EndLocation (const EndLocation_type& x);

    // BarSize
    // 
    typedef ::xml_schema::string BarSize_type;
    typedef ::xsd::cxx::tree::traits< BarSize_type, wchar_t > BarSize_traits;

    const BarSize_type&
    BarSize () const;

    BarSize_type&
    BarSize ();

    void
    BarSize (const BarSize_type& x);

    void
    BarSize (::std::auto_ptr< BarSize_type > p);

    // BarSpacing
    // 
    typedef ::xml_schema::double_ BarSpacing_type;
    typedef ::xsd::cxx::tree::traits< BarSpacing_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > BarSpacing_traits;

    const BarSpacing_type&
    BarSpacing () const;

    BarSpacing_type&
    BarSpacing ();

    void
    BarSpacing (const BarSpacing_type& x);

    // NumVerticalLegs
    // 
    typedef ::xml_schema::double_ NumVerticalLegs_type;
    typedef ::xsd::cxx::tree::traits< NumVerticalLegs_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > NumVerticalLegs_traits;

    const NumVerticalLegs_type&
    NumVerticalLegs () const;

    NumVerticalLegs_type&
    NumVerticalLegs ();

    void
    NumVerticalLegs (const NumVerticalLegs_type& x);

    // NumLegsExtendedIntoDeck
    // 
    typedef ::xml_schema::double_ NumLegsExtendedIntoDeck_type;
    typedef ::xsd::cxx::tree::traits< NumLegsExtendedIntoDeck_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > NumLegsExtendedIntoDeck_traits;

    const NumLegsExtendedIntoDeck_type&
    NumLegsExtendedIntoDeck () const;

    NumLegsExtendedIntoDeck_type&
    NumLegsExtendedIntoDeck ();

    void
    NumLegsExtendedIntoDeck (const NumLegsExtendedIntoDeck_type& x);

    // ConfinementBarSize
    // 
    typedef ::xml_schema::string ConfinementBarSize_type;
    typedef ::xsd::cxx::tree::traits< ConfinementBarSize_type, wchar_t > ConfinementBarSize_traits;

    const ConfinementBarSize_type&
    ConfinementBarSize () const;

    ConfinementBarSize_type&
    ConfinementBarSize ();

    void
    ConfinementBarSize (const ConfinementBarSize_type& x);

    void
    ConfinementBarSize (::std::auto_ptr< ConfinementBarSize_type > p);

    // Constructors.
    //
    StirrupZoneType ();

    StirrupZoneType (const StartLocation_type&,
                     const EndLocation_type&,
                     const BarSize_type&,
                     const BarSpacing_type&,
                     const NumVerticalLegs_type&,
                     const NumLegsExtendedIntoDeck_type&,
                     const ConfinementBarSize_type&);

    StirrupZoneType (const xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    StirrupZoneType (const StirrupZoneType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual StirrupZoneType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~StirrupZoneType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< StartLocation_type > StartLocation_;
    ::xsd::cxx::tree::one< EndLocation_type > EndLocation_;
    ::xsd::cxx::tree::one< BarSize_type > BarSize_;
    ::xsd::cxx::tree::one< BarSpacing_type > BarSpacing_;
    ::xsd::cxx::tree::one< NumVerticalLegs_type > NumVerticalLegs_;
    ::xsd::cxx::tree::one< NumLegsExtendedIntoDeck_type > NumLegsExtendedIntoDeck_;
    ::xsd::cxx::tree::one< ConfinementBarSize_type > ConfinementBarSize_;
  };

  class CamberResultType: public ::xml_schema::type
  {
    public:
    // FractionalLocation
    // 
    typedef ::xml_schema::double_ FractionalLocation_type;
    typedef ::xsd::cxx::tree::traits< FractionalLocation_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > FractionalLocation_traits;

    const FractionalLocation_type&
    FractionalLocation () const;

    FractionalLocation_type&
    FractionalLocation ();

    void
    FractionalLocation (const FractionalLocation_type& x);

    // Location
    // 
    typedef ::xml_schema::double_ Location_type;
    typedef ::xsd::cxx::tree::traits< Location_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Location_traits;

    const Location_type&
    Location () const;

    Location_type&
    Location ();

    void
    Location (const Location_type& x);

    // LocationFromEndOfGirder
    // 
    typedef ::xml_schema::double_ LocationFromEndOfGirder_type;
    typedef ::xsd::cxx::tree::traits< LocationFromEndOfGirder_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > LocationFromEndOfGirder_traits;

    const LocationFromEndOfGirder_type&
    LocationFromEndOfGirder () const;

    LocationFromEndOfGirder_type&
    LocationFromEndOfGirder ();

    void
    LocationFromEndOfGirder (const LocationFromEndOfGirder_type& x);

    // TopOfDeckElevation
    // 
    typedef ::xml_schema::double_ TopOfDeckElevation_type;
    typedef ::xsd::cxx::tree::traits< TopOfDeckElevation_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > TopOfDeckElevation_traits;

    const TopOfDeckElevation_type&
    TopOfDeckElevation () const;

    TopOfDeckElevation_type&
    TopOfDeckElevation ();

    void
    TopOfDeckElevation (const TopOfDeckElevation_type& x);

    // TopOfGirderChordElevation
    // 
    typedef ::xml_schema::double_ TopOfGirderChordElevation_type;
    typedef ::xsd::cxx::tree::traits< TopOfGirderChordElevation_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > TopOfGirderChordElevation_traits;

    const TopOfGirderChordElevation_type&
    TopOfGirderChordElevation () const;

    TopOfGirderChordElevation_type&
    TopOfGirderChordElevation ();

    void
    TopOfGirderChordElevation (const TopOfGirderChordElevation_type& x);

    // TopOfGirderElevationPriorToSlabCasting
    // 
    typedef ::xml_schema::double_ TopOfGirderElevationPriorToSlabCasting_type;
    typedef ::xsd::cxx::tree::traits< TopOfGirderElevationPriorToSlabCasting_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > TopOfGirderElevationPriorToSlabCasting_traits;

    const TopOfGirderElevationPriorToSlabCasting_type&
    TopOfGirderElevationPriorToSlabCasting () const;

    TopOfGirderElevationPriorToSlabCasting_type&
    TopOfGirderElevationPriorToSlabCasting ();

    void
    TopOfGirderElevationPriorToSlabCasting (const TopOfGirderElevationPriorToSlabCasting_type& x);

    // TopOfGirderElevationAtFinal
    // 
    typedef ::xml_schema::double_ TopOfGirderElevationAtFinal_type;
    typedef ::xsd::cxx::tree::traits< TopOfGirderElevationAtFinal_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > TopOfGirderElevationAtFinal_traits;

    const TopOfGirderElevationAtFinal_type&
    TopOfGirderElevationAtFinal () const;

    TopOfGirderElevationAtFinal_type&
    TopOfGirderElevationAtFinal ();

    void
    TopOfGirderElevationAtFinal (const TopOfGirderElevationAtFinal_type& x);

    // GirderCamberAtRelease
    // 
    typedef ::xml_schema::double_ GirderCamberAtRelease_type;
    typedef ::xsd::cxx::tree::traits< GirderCamberAtRelease_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > GirderCamberAtRelease_traits;

    const GirderCamberAtRelease_type&
    GirderCamberAtRelease () const;

    GirderCamberAtRelease_type&
    GirderCamberAtRelease ();

    void
    GirderCamberAtRelease (const GirderCamberAtRelease_type& x);

    // GirderCamberPriorToDeckCasting
    // 
    typedef ::xml_schema::double_ GirderCamberPriorToDeckCasting_type;
    typedef ::xsd::cxx::tree::traits< GirderCamberPriorToDeckCasting_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > GirderCamberPriorToDeckCasting_traits;

    const GirderCamberPriorToDeckCasting_type&
    GirderCamberPriorToDeckCasting () const;

    GirderCamberPriorToDeckCasting_type&
    GirderCamberPriorToDeckCasting ();

    void
    GirderCamberPriorToDeckCasting (const GirderCamberPriorToDeckCasting_type& x);

    // GirderCamberAtFinal
    // 
    typedef ::xml_schema::double_ GirderCamberAtFinal_type;
    typedef ::xsd::cxx::tree::traits< GirderCamberAtFinal_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > GirderCamberAtFinal_traits;

    const GirderCamberAtFinal_type&
    GirderCamberAtFinal () const;

    GirderCamberAtFinal_type&
    GirderCamberAtFinal ();

    void
    GirderCamberAtFinal (const GirderCamberAtFinal_type& x);

    // Constructors.
    //
    CamberResultType ();

    CamberResultType (const FractionalLocation_type&,
                      const Location_type&,
                      const LocationFromEndOfGirder_type&,
                      const TopOfDeckElevation_type&,
                      const TopOfGirderChordElevation_type&,
                      const TopOfGirderElevationPriorToSlabCasting_type&,
                      const TopOfGirderElevationAtFinal_type&,
                      const GirderCamberAtRelease_type&,
                      const GirderCamberPriorToDeckCasting_type&,
                      const GirderCamberAtFinal_type&);

    CamberResultType (const xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    CamberResultType (const CamberResultType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual CamberResultType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~CamberResultType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< FractionalLocation_type > FractionalLocation_;
    ::xsd::cxx::tree::one< Location_type > Location_;
    ::xsd::cxx::tree::one< LocationFromEndOfGirder_type > LocationFromEndOfGirder_;
    ::xsd::cxx::tree::one< TopOfDeckElevation_type > TopOfDeckElevation_;
    ::xsd::cxx::tree::one< TopOfGirderChordElevation_type > TopOfGirderChordElevation_;
    ::xsd::cxx::tree::one< TopOfGirderElevationPriorToSlabCasting_type > TopOfGirderElevationPriorToSlabCasting_;
    ::xsd::cxx::tree::one< TopOfGirderElevationAtFinal_type > TopOfGirderElevationAtFinal_;
    ::xsd::cxx::tree::one< GirderCamberAtRelease_type > GirderCamberAtRelease_;
    ::xsd::cxx::tree::one< GirderCamberPriorToDeckCasting_type > GirderCamberPriorToDeckCasting_;
    ::xsd::cxx::tree::one< GirderCamberAtFinal_type > GirderCamberAtFinal_;
  };

  class GirderDataType: public ::xml_schema::type
  {
    public:
    // GirderKey
    // 
    typedef ::KDOT::GirderKeyType GirderKey_type;
    typedef ::xsd::cxx::tree::traits< GirderKey_type, wchar_t > GirderKey_traits;

    const GirderKey_type&
    GirderKey () const;

    GirderKey_type&
    GirderKey ();

    void
    GirderKey (const GirderKey_type& x);

    void
    GirderKey (::std::auto_ptr< GirderKey_type > p);

    // GirderType
    // 
    typedef ::xml_schema::string GirderType_type;
    typedef ::xsd::cxx::tree::traits< GirderType_type, wchar_t > GirderType_traits;

    const GirderType_type&
    GirderType () const;

    GirderType_type&
    GirderType ();

    void
    GirderType (const GirderType_type& x);

    void
    GirderType (::std::auto_ptr< GirderType_type > p);

    // SectionDimensions
    // 
    typedef ::KDOT::NamedDoubleType SectionDimensions_type;
    typedef ::xsd::cxx::tree::sequence< SectionDimensions_type > SectionDimensions_sequence;
    typedef xsd::cxx::tree::sequence< SectionDimensions_type >::iterator SectionDimensions_iterator;
    typedef xsd::cxx::tree::sequence< SectionDimensions_type >::const_iterator SectionDimensions_const_iterator;
    typedef ::xsd::cxx::tree::traits< SectionDimensions_type, wchar_t > SectionDimensions_traits;

    const SectionDimensions_sequence&
    SectionDimensions () const;

    SectionDimensions_sequence&
    SectionDimensions ();

    void
    SectionDimensions (const SectionDimensions_sequence& s);

    // Fci
    // 
    typedef ::xml_schema::double_ Fci_type;
    typedef ::xsd::cxx::tree::traits< Fci_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Fci_traits;

    const Fci_type&
    Fci () const;

    Fci_type&
    Fci ();

    void
    Fci (const Fci_type& x);

    // Fc
    // 
    typedef ::xml_schema::double_ Fc_type;
    typedef ::xsd::cxx::tree::traits< Fc_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Fc_traits;

    const Fc_type&
    Fc () const;

    Fc_type&
    Fc ();

    void
    Fc (const Fc_type& x);

    // Eci
    // 
    typedef ::xml_schema::double_ Eci_type;
    typedef ::xsd::cxx::tree::traits< Eci_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Eci_traits;

    const Eci_type&
    Eci () const;

    Eci_type&
    Eci ();

    void
    Eci (const Eci_type& x);

    // Ec
    // 
    typedef ::xml_schema::double_ Ec_type;
    typedef ::xsd::cxx::tree::traits< Ec_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Ec_traits;

    const Ec_type&
    Ec () const;

    Ec_type&
    Ec ();

    void
    Ec (const Ec_type& x);

    // GirderLength
    // 
    typedef ::xml_schema::double_ GirderLength_type;
    typedef ::xsd::cxx::tree::traits< GirderLength_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > GirderLength_traits;

    const GirderLength_type&
    GirderLength () const;

    GirderLength_type&
    GirderLength ();

    void
    GirderLength (const GirderLength_type& x);

    // SpacingLeftStart
    // 
    typedef ::xml_schema::double_ SpacingLeftStart_type;
    typedef ::xsd::cxx::tree::traits< SpacingLeftStart_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > SpacingLeftStart_traits;

    const SpacingLeftStart_type&
    SpacingLeftStart () const;

    SpacingLeftStart_type&
    SpacingLeftStart ();

    void
    SpacingLeftStart (const SpacingLeftStart_type& x);

    // SpacingRightStart
    // 
    typedef ::xml_schema::double_ SpacingRightStart_type;
    typedef ::xsd::cxx::tree::traits< SpacingRightStart_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > SpacingRightStart_traits;

    const SpacingRightStart_type&
    SpacingRightStart () const;

    SpacingRightStart_type&
    SpacingRightStart ();

    void
    SpacingRightStart (const SpacingRightStart_type& x);

    // SpacingLeftEnd
    // 
    typedef ::xml_schema::double_ SpacingLeftEnd_type;
    typedef ::xsd::cxx::tree::traits< SpacingLeftEnd_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > SpacingLeftEnd_traits;

    const SpacingLeftEnd_type&
    SpacingLeftEnd () const;

    SpacingLeftEnd_type&
    SpacingLeftEnd ();

    void
    SpacingLeftEnd (const SpacingLeftEnd_type& x);

    // SpacingRightEnd
    // 
    typedef ::xml_schema::double_ SpacingRightEnd_type;
    typedef ::xsd::cxx::tree::traits< SpacingRightEnd_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > SpacingRightEnd_traits;

    const SpacingRightEnd_type&
    SpacingRightEnd () const;

    SpacingRightEnd_type&
    SpacingRightEnd ();

    void
    SpacingRightEnd (const SpacingRightEnd_type& x);

    // NumberOfHarpingPoints
    // 
    typedef ::KDOT::IndexType1 NumberOfHarpingPoints_type;
    typedef ::xsd::cxx::tree::traits< NumberOfHarpingPoints_type, wchar_t > NumberOfHarpingPoints_traits;

    const NumberOfHarpingPoints_type&
    NumberOfHarpingPoints () const;

    NumberOfHarpingPoints_type&
    NumberOfHarpingPoints ();

    void
    NumberOfHarpingPoints (const NumberOfHarpingPoints_type& x);

    void
    NumberOfHarpingPoints (::std::auto_ptr< NumberOfHarpingPoints_type > p);

    // HarpingPoints
    // 
    typedef ::KDOT::HarpingPointDataType HarpingPoints_type;
    typedef ::xsd::cxx::tree::sequence< HarpingPoints_type > HarpingPoints_sequence;
    typedef xsd::cxx::tree::sequence< HarpingPoints_type >::iterator HarpingPoints_iterator;
    typedef xsd::cxx::tree::sequence< HarpingPoints_type >::const_iterator HarpingPoints_const_iterator;
    typedef ::xsd::cxx::tree::traits< HarpingPoints_type, wchar_t > HarpingPoints_traits;

    const HarpingPoints_sequence&
    HarpingPoints () const;

    HarpingPoints_sequence&
    HarpingPoints ();

    void
    HarpingPoints (const HarpingPoints_sequence& s);

    // LiftingLocation
    // 
    typedef ::xml_schema::double_ LiftingLocation_type;
    typedef ::xsd::cxx::tree::traits< LiftingLocation_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > LiftingLocation_traits;

    const LiftingLocation_type&
    LiftingLocation () const;

    LiftingLocation_type&
    LiftingLocation ();

    void
    LiftingLocation (const LiftingLocation_type& x);

    // LeadingHaulingLocation
    // 
    typedef ::xml_schema::double_ LeadingHaulingLocation_type;
    typedef ::xsd::cxx::tree::traits< LeadingHaulingLocation_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > LeadingHaulingLocation_traits;

    const LeadingHaulingLocation_type&
    LeadingHaulingLocation () const;

    LeadingHaulingLocation_type&
    LeadingHaulingLocation ();

    void
    LeadingHaulingLocation (const LeadingHaulingLocation_type& x);

    // TrailingHaulingLocation
    // 
    typedef ::xml_schema::double_ TrailingHaulingLocation_type;
    typedef ::xsd::cxx::tree::traits< TrailingHaulingLocation_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > TrailingHaulingLocation_traits;

    const TrailingHaulingLocation_type&
    TrailingHaulingLocation () const;

    TrailingHaulingLocation_type&
    TrailingHaulingLocation ();

    void
    TrailingHaulingLocation (const TrailingHaulingLocation_type& x);

    // StartADimension
    // 
    typedef ::xml_schema::double_ StartADimension_type;
    typedef ::xsd::cxx::tree::traits< StartADimension_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > StartADimension_traits;

    const StartADimension_type&
    StartADimension () const;

    StartADimension_type&
    StartADimension ();

    void
    StartADimension (const StartADimension_type& x);

    // EndADimension
    // 
    typedef ::xml_schema::double_ EndADimension_type;
    typedef ::xsd::cxx::tree::traits< EndADimension_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > EndADimension_traits;

    const EndADimension_type&
    EndADimension () const;

    EndADimension_type&
    EndADimension ();

    void
    EndADimension (const EndADimension_type& x);

    // GirderHaunchVolume
    // 
    typedef ::xml_schema::double_ GirderHaunchVolume_type;
    typedef ::xsd::cxx::tree::traits< GirderHaunchVolume_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > GirderHaunchVolume_traits;

    const GirderHaunchVolume_type&
    GirderHaunchVolume () const;

    GirderHaunchVolume_type&
    GirderHaunchVolume ();

    void
    GirderHaunchVolume (const GirderHaunchVolume_type& x);

    // IsPrismatic
    // 
    typedef ::xml_schema::boolean IsPrismatic_type;
    typedef ::xsd::cxx::tree::traits< IsPrismatic_type, wchar_t > IsPrismatic_traits;

    const IsPrismatic_type&
    IsPrismatic () const;

    IsPrismatic_type&
    IsPrismatic ();

    void
    IsPrismatic (const IsPrismatic_type& x);

    // Area
    // 
    typedef ::xml_schema::double_ Area_type;
    typedef ::xsd::cxx::tree::traits< Area_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Area_traits;

    const Area_type&
    Area () const;

    Area_type&
    Area ();

    void
    Area (const Area_type& x);

    // Ix
    // 
    typedef ::xml_schema::double_ Ix_type;
    typedef ::xsd::cxx::tree::traits< Ix_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Ix_traits;

    const Ix_type&
    Ix () const;

    Ix_type&
    Ix ();

    void
    Ix (const Ix_type& x);

    // Iy
    // 
    typedef ::xml_schema::double_ Iy_type;
    typedef ::xsd::cxx::tree::traits< Iy_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Iy_traits;

    const Iy_type&
    Iy () const;

    Iy_type&
    Iy ();

    void
    Iy (const Iy_type& x);

    // d
    // 
    typedef ::xml_schema::double_ d_type;
    typedef ::xsd::cxx::tree::traits< d_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > d_traits;

    const d_type&
    d () const;

    d_type&
    d ();

    void
    d (const d_type& x);

    // Yt
    // 
    typedef ::xml_schema::double_ Yt_type;
    typedef ::xsd::cxx::tree::traits< Yt_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Yt_traits;

    const Yt_type&
    Yt () const;

    Yt_type&
    Yt ();

    void
    Yt (const Yt_type& x);

    // Yb
    // 
    typedef ::xml_schema::double_ Yb_type;
    typedef ::xsd::cxx::tree::traits< Yb_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Yb_traits;

    const Yb_type&
    Yb () const;

    Yb_type&
    Yb ();

    void
    Yb (const Yb_type& x);

    // St
    // 
    typedef ::xml_schema::double_ St_type;
    typedef ::xsd::cxx::tree::traits< St_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > St_traits;

    const St_type&
    St () const;

    St_type&
    St ();

    void
    St (const St_type& x);

    // Sb
    // 
    typedef ::xml_schema::double_ Sb_type;
    typedef ::xsd::cxx::tree::traits< Sb_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Sb_traits;

    const Sb_type&
    Sb () const;

    Sb_type&
    Sb ();

    void
    Sb (const Sb_type& x);

    // P
    // 
    typedef ::xml_schema::double_ P_type;
    typedef ::xsd::cxx::tree::traits< P_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > P_traits;

    const P_type&
    P () const;

    P_type&
    P ();

    void
    P (const P_type& x);

    // W
    // 
    typedef ::xml_schema::double_ W_type;
    typedef ::xsd::cxx::tree::traits< W_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > W_traits;

    const W_type&
    W () const;

    W_type&
    W ();

    void
    W (const W_type& x);

    // Wtotal
    // 
    typedef ::xml_schema::double_ Wtotal_type;
    typedef ::xsd::cxx::tree::traits< Wtotal_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Wtotal_traits;

    const Wtotal_type&
    Wtotal () const;

    Wtotal_type&
    Wtotal ();

    void
    Wtotal (const Wtotal_type& x);

    // Area_c
    // 
    typedef ::xml_schema::double_ Area_c_type;
    typedef ::xsd::cxx::tree::traits< Area_c_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Area_c_traits;

    const Area_c_type&
    Area_c () const;

    Area_c_type&
    Area_c ();

    void
    Area_c (const Area_c_type& x);

    // Ix_c
    // 
    typedef ::xml_schema::double_ Ix_c_type;
    typedef ::xsd::cxx::tree::traits< Ix_c_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Ix_c_traits;

    const Ix_c_type&
    Ix_c () const;

    Ix_c_type&
    Ix_c ();

    void
    Ix_c (const Ix_c_type& x);

    // Iy_c
    // 
    typedef ::xml_schema::double_ Iy_c_type;
    typedef ::xsd::cxx::tree::traits< Iy_c_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Iy_c_traits;

    const Iy_c_type&
    Iy_c () const;

    Iy_c_type&
    Iy_c ();

    void
    Iy_c (const Iy_c_type& x);

    // d_c
    // 
    typedef ::xml_schema::double_ d_c_type;
    typedef ::xsd::cxx::tree::traits< d_c_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > d_c_traits;

    const d_c_type&
    d_c () const;

    d_c_type&
    d_c ();

    void
    d_c (const d_c_type& x);

    // Yt_c
    // 
    typedef ::xml_schema::double_ Yt_c_type;
    typedef ::xsd::cxx::tree::traits< Yt_c_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Yt_c_traits;

    const Yt_c_type&
    Yt_c () const;

    Yt_c_type&
    Yt_c ();

    void
    Yt_c (const Yt_c_type& x);

    // Yb_c
    // 
    typedef ::xml_schema::double_ Yb_c_type;
    typedef ::xsd::cxx::tree::traits< Yb_c_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Yb_c_traits;

    const Yb_c_type&
    Yb_c () const;

    Yb_c_type&
    Yb_c ();

    void
    Yb_c (const Yb_c_type& x);

    // St_c
    // 
    typedef ::xml_schema::double_ St_c_type;
    typedef ::xsd::cxx::tree::traits< St_c_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > St_c_traits;

    const St_c_type&
    St_c () const;

    St_c_type&
    St_c ();

    void
    St_c (const St_c_type& x);

    // Sb_c
    // 
    typedef ::xml_schema::double_ Sb_c_type;
    typedef ::xsd::cxx::tree::traits< Sb_c_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > Sb_c_traits;

    const Sb_c_type&
    Sb_c () const;

    Sb_c_type&
    Sb_c ();

    void
    Sb_c (const Sb_c_type& x);

    // StrandEccentricityAtEnds
    // 
    typedef ::xml_schema::double_ StrandEccentricityAtEnds_type;
    typedef ::xsd::cxx::tree::traits< StrandEccentricityAtEnds_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > StrandEccentricityAtEnds_traits;

    const StrandEccentricityAtEnds_type&
    StrandEccentricityAtEnds () const;

    StrandEccentricityAtEnds_type&
    StrandEccentricityAtEnds ();

    void
    StrandEccentricityAtEnds (const StrandEccentricityAtEnds_type& x);

    // StrandEccentricityAtHPs
    // 
    typedef ::xml_schema::double_ StrandEccentricityAtHPs_type;
    typedef ::xsd::cxx::tree::traits< StrandEccentricityAtHPs_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > StrandEccentricityAtHPs_traits;

    const StrandEccentricityAtHPs_type&
    StrandEccentricityAtHPs () const;

    StrandEccentricityAtHPs_type&
    StrandEccentricityAtHPs ();

    void
    StrandEccentricityAtHPs (const StrandEccentricityAtHPs_type& x);

    // PrestressingStrandMaterial
    // 
    typedef ::KDOT::PrestressingStrandType PrestressingStrandMaterial_type;
    typedef ::xsd::cxx::tree::traits< PrestressingStrandMaterial_type, wchar_t > PrestressingStrandMaterial_traits;

    const PrestressingStrandMaterial_type&
    PrestressingStrandMaterial () const;

    PrestressingStrandMaterial_type&
    PrestressingStrandMaterial ();

    void
    PrestressingStrandMaterial (const PrestressingStrandMaterial_type& x);

    void
    PrestressingStrandMaterial (::std::auto_ptr< PrestressingStrandMaterial_type > p);

    // NumberOfStraightStrands
    // 
    typedef ::xml_schema::non_negative_integer NumberOfStraightStrands_type;
    typedef ::xsd::cxx::tree::traits< NumberOfStraightStrands_type, wchar_t > NumberOfStraightStrands_traits;

    const NumberOfStraightStrands_type&
    NumberOfStraightStrands () const;

    NumberOfStraightStrands_type&
    NumberOfStraightStrands ();

    void
    NumberOfStraightStrands (const NumberOfStraightStrands_type& x);

    // StraightStrandCoordinates
    // 
    typedef ::KDOT::Point2DType StraightStrandCoordinates_type;
    typedef ::xsd::cxx::tree::sequence< StraightStrandCoordinates_type > StraightStrandCoordinates_sequence;
    typedef xsd::cxx::tree::sequence< StraightStrandCoordinates_type >::iterator StraightStrandCoordinates_iterator;
    typedef xsd::cxx::tree::sequence< StraightStrandCoordinates_type >::const_iterator StraightStrandCoordinates_const_iterator;
    typedef ::xsd::cxx::tree::traits< StraightStrandCoordinates_type, wchar_t > StraightStrandCoordinates_traits;

    const StraightStrandCoordinates_sequence&
    StraightStrandCoordinates () const;

    StraightStrandCoordinates_sequence&
    StraightStrandCoordinates ();

    void
    StraightStrandCoordinates (const StraightStrandCoordinates_sequence& s);

    // NumberOfDebondedStraightStrands
    // 
    typedef ::xml_schema::non_negative_integer NumberOfDebondedStraightStrands_type;
    typedef ::xsd::cxx::tree::traits< NumberOfDebondedStraightStrands_type, wchar_t > NumberOfDebondedStraightStrands_traits;

    const NumberOfDebondedStraightStrands_type&
    NumberOfDebondedStraightStrands () const;

    NumberOfDebondedStraightStrands_type&
    NumberOfDebondedStraightStrands ();

    void
    NumberOfDebondedStraightStrands (const NumberOfDebondedStraightStrands_type& x);

    // StraightStrandDebonding
    // 
    typedef ::KDOT::DebondDataType StraightStrandDebonding_type;
    typedef ::xsd::cxx::tree::sequence< StraightStrandDebonding_type > StraightStrandDebonding_sequence;
    typedef xsd::cxx::tree::sequence< StraightStrandDebonding_type >::iterator StraightStrandDebonding_iterator;
    typedef xsd::cxx::tree::sequence< StraightStrandDebonding_type >::const_iterator StraightStrandDebonding_const_iterator;
    typedef ::xsd::cxx::tree::traits< StraightStrandDebonding_type, wchar_t > StraightStrandDebonding_traits;

    const StraightStrandDebonding_sequence&
    StraightStrandDebonding () const;

    StraightStrandDebonding_sequence&
    StraightStrandDebonding ();

    void
    StraightStrandDebonding (const StraightStrandDebonding_sequence& s);

    // NumberOfExtendedStraightStrands
    // 
    typedef ::xml_schema::non_negative_integer NumberOfExtendedStraightStrands_type;
    typedef ::xsd::cxx::tree::traits< NumberOfExtendedStraightStrands_type, wchar_t > NumberOfExtendedStraightStrands_traits;

    const NumberOfExtendedStraightStrands_type&
    NumberOfExtendedStraightStrands () const;

    NumberOfExtendedStraightStrands_type&
    NumberOfExtendedStraightStrands ();

    void
    NumberOfExtendedStraightStrands (const NumberOfExtendedStraightStrands_type& x);

    // StraightStrandExtensions
    // 
    typedef ::KDOT::StrandExtensionDataType StraightStrandExtensions_type;
    typedef ::xsd::cxx::tree::sequence< StraightStrandExtensions_type > StraightStrandExtensions_sequence;
    typedef xsd::cxx::tree::sequence< StraightStrandExtensions_type >::iterator StraightStrandExtensions_iterator;
    typedef xsd::cxx::tree::sequence< StraightStrandExtensions_type >::const_iterator StraightStrandExtensions_const_iterator;
    typedef ::xsd::cxx::tree::traits< StraightStrandExtensions_type, wchar_t > StraightStrandExtensions_traits;

    const StraightStrandExtensions_sequence&
    StraightStrandExtensions () const;

    StraightStrandExtensions_sequence&
    StraightStrandExtensions ();

    void
    StraightStrandExtensions (const StraightStrandExtensions_sequence& s);

    // NumberOfHarpedStrands
    // 
    typedef ::xml_schema::non_negative_integer NumberOfHarpedStrands_type;
    typedef ::xsd::cxx::tree::traits< NumberOfHarpedStrands_type, wchar_t > NumberOfHarpedStrands_traits;

    const NumberOfHarpedStrands_type&
    NumberOfHarpedStrands () const;

    NumberOfHarpedStrands_type&
    NumberOfHarpedStrands ();

    void
    NumberOfHarpedStrands (const NumberOfHarpedStrands_type& x);

    // HarpedStrandCoordinatesAtEnds
    // 
    typedef ::KDOT::Point2DType HarpedStrandCoordinatesAtEnds_type;
    typedef ::xsd::cxx::tree::sequence< HarpedStrandCoordinatesAtEnds_type > HarpedStrandCoordinatesAtEnds_sequence;
    typedef xsd::cxx::tree::sequence< HarpedStrandCoordinatesAtEnds_type >::iterator HarpedStrandCoordinatesAtEnds_iterator;
    typedef xsd::cxx::tree::sequence< HarpedStrandCoordinatesAtEnds_type >::const_iterator HarpedStrandCoordinatesAtEnds_const_iterator;
    typedef ::xsd::cxx::tree::traits< HarpedStrandCoordinatesAtEnds_type, wchar_t > HarpedStrandCoordinatesAtEnds_traits;

    const HarpedStrandCoordinatesAtEnds_sequence&
    HarpedStrandCoordinatesAtEnds () const;

    HarpedStrandCoordinatesAtEnds_sequence&
    HarpedStrandCoordinatesAtEnds ();

    void
    HarpedStrandCoordinatesAtEnds (const HarpedStrandCoordinatesAtEnds_sequence& s);

    // HarpedStrandCoordinatesAtHP
    // 
    typedef ::KDOT::Point2DType HarpedStrandCoordinatesAtHP_type;
    typedef ::xsd::cxx::tree::sequence< HarpedStrandCoordinatesAtHP_type > HarpedStrandCoordinatesAtHP_sequence;
    typedef xsd::cxx::tree::sequence< HarpedStrandCoordinatesAtHP_type >::iterator HarpedStrandCoordinatesAtHP_iterator;
    typedef xsd::cxx::tree::sequence< HarpedStrandCoordinatesAtHP_type >::const_iterator HarpedStrandCoordinatesAtHP_const_iterator;
    typedef ::xsd::cxx::tree::traits< HarpedStrandCoordinatesAtHP_type, wchar_t > HarpedStrandCoordinatesAtHP_traits;

    const HarpedStrandCoordinatesAtHP_sequence&
    HarpedStrandCoordinatesAtHP () const;

    HarpedStrandCoordinatesAtHP_sequence&
    HarpedStrandCoordinatesAtHP ();

    void
    HarpedStrandCoordinatesAtHP (const HarpedStrandCoordinatesAtHP_sequence& s);

    // NumberOfTemporaryStrands
    // 
    typedef ::xml_schema::non_negative_integer NumberOfTemporaryStrands_type;
    typedef ::xsd::cxx::tree::traits< NumberOfTemporaryStrands_type, wchar_t > NumberOfTemporaryStrands_traits;

    const NumberOfTemporaryStrands_type&
    NumberOfTemporaryStrands () const;

    NumberOfTemporaryStrands_type&
    NumberOfTemporaryStrands ();

    void
    NumberOfTemporaryStrands (const NumberOfTemporaryStrands_type& x);

    // TemporaryStrandCoordinates
    // 
    typedef ::KDOT::Point2DType TemporaryStrandCoordinates_type;
    typedef ::xsd::cxx::tree::sequence< TemporaryStrandCoordinates_type > TemporaryStrandCoordinates_sequence;
    typedef xsd::cxx::tree::sequence< TemporaryStrandCoordinates_type >::iterator TemporaryStrandCoordinates_iterator;
    typedef xsd::cxx::tree::sequence< TemporaryStrandCoordinates_type >::const_iterator TemporaryStrandCoordinates_const_iterator;
    typedef ::xsd::cxx::tree::traits< TemporaryStrandCoordinates_type, wchar_t > TemporaryStrandCoordinates_traits;

    const TemporaryStrandCoordinates_sequence&
    TemporaryStrandCoordinates () const;

    TemporaryStrandCoordinates_sequence&
    TemporaryStrandCoordinates ();

    void
    TemporaryStrandCoordinates (const TemporaryStrandCoordinates_sequence& s);

    // LongitudinalRebarMaterial
    // 
    typedef ::KDOT::RebarMaterialType LongitudinalRebarMaterial_type;
    typedef ::xsd::cxx::tree::traits< LongitudinalRebarMaterial_type, wchar_t > LongitudinalRebarMaterial_traits;

    const LongitudinalRebarMaterial_type&
    LongitudinalRebarMaterial () const;

    LongitudinalRebarMaterial_type&
    LongitudinalRebarMaterial ();

    void
    LongitudinalRebarMaterial (const LongitudinalRebarMaterial_type& x);

    void
    LongitudinalRebarMaterial (::std::auto_ptr< LongitudinalRebarMaterial_type > p);

    // NumberOfLongitudinalRebarRows
    // 
    typedef ::xml_schema::non_negative_integer NumberOfLongitudinalRebarRows_type;
    typedef ::xsd::cxx::tree::traits< NumberOfLongitudinalRebarRows_type, wchar_t > NumberOfLongitudinalRebarRows_traits;

    const NumberOfLongitudinalRebarRows_type&
    NumberOfLongitudinalRebarRows () const;

    NumberOfLongitudinalRebarRows_type&
    NumberOfLongitudinalRebarRows ();

    void
    NumberOfLongitudinalRebarRows (const NumberOfLongitudinalRebarRows_type& x);

    // LongitudinalRebarRows
    // 
    typedef ::KDOT::RebarRowInstanceType LongitudinalRebarRows_type;
    typedef ::xsd::cxx::tree::sequence< LongitudinalRebarRows_type > LongitudinalRebarRows_sequence;
    typedef xsd::cxx::tree::sequence< LongitudinalRebarRows_type >::iterator LongitudinalRebarRows_iterator;
    typedef xsd::cxx::tree::sequence< LongitudinalRebarRows_type >::const_iterator LongitudinalRebarRows_const_iterator;
    typedef ::xsd::cxx::tree::traits< LongitudinalRebarRows_type, wchar_t > LongitudinalRebarRows_traits;

    const LongitudinalRebarRows_sequence&
    LongitudinalRebarRows () const;

    LongitudinalRebarRows_sequence&
    LongitudinalRebarRows ();

    void
    LongitudinalRebarRows (const LongitudinalRebarRows_sequence& s);

    // TransverseReinforcementMaterial
    // 
    typedef ::KDOT::RebarMaterialType TransverseReinforcementMaterial_type;
    typedef ::xsd::cxx::tree::traits< TransverseReinforcementMaterial_type, wchar_t > TransverseReinforcementMaterial_traits;

    const TransverseReinforcementMaterial_type&
    TransverseReinforcementMaterial () const;

    TransverseReinforcementMaterial_type&
    TransverseReinforcementMaterial ();

    void
    TransverseReinforcementMaterial (const TransverseReinforcementMaterial_type& x);

    void
    TransverseReinforcementMaterial (::std::auto_ptr< TransverseReinforcementMaterial_type > p);

    // NumberOfStirrupZones
    // 
    typedef ::xml_schema::non_negative_integer NumberOfStirrupZones_type;
    typedef ::xsd::cxx::tree::traits< NumberOfStirrupZones_type, wchar_t > NumberOfStirrupZones_traits;

    const NumberOfStirrupZones_type&
    NumberOfStirrupZones () const;

    NumberOfStirrupZones_type&
    NumberOfStirrupZones ();

    void
    NumberOfStirrupZones (const NumberOfStirrupZones_type& x);

    // StirrupZones
    // 
    typedef ::KDOT::StirrupZoneType StirrupZones_type;
    typedef ::xsd::cxx::tree::sequence< StirrupZones_type > StirrupZones_sequence;
    typedef xsd::cxx::tree::sequence< StirrupZones_type >::iterator StirrupZones_iterator;
    typedef xsd::cxx::tree::sequence< StirrupZones_type >::const_iterator StirrupZones_const_iterator;
    typedef ::xsd::cxx::tree::traits< StirrupZones_type, wchar_t > StirrupZones_traits;

    const StirrupZones_sequence&
    StirrupZones () const;

    StirrupZones_sequence&
    StirrupZones ();

    void
    StirrupZones (const StirrupZones_sequence& s);

    // CamberResults
    // 
    typedef ::KDOT::CamberResultType CamberResults_type;
    typedef ::xsd::cxx::tree::sequence< CamberResults_type > CamberResults_sequence;
    typedef xsd::cxx::tree::sequence< CamberResults_type >::iterator CamberResults_iterator;
    typedef xsd::cxx::tree::sequence< CamberResults_type >::const_iterator CamberResults_const_iterator;
    typedef ::xsd::cxx::tree::traits< CamberResults_type, wchar_t > CamberResults_traits;

    const CamberResults_sequence&
    CamberResults () const;

    CamberResults_sequence&
    CamberResults ();

    void
    CamberResults (const CamberResults_sequence& s);

    // Constructors.
    //
    GirderDataType ();

    GirderDataType (const GirderKey_type&,
                    const GirderType_type&,
                    const Fci_type&,
                    const Fc_type&,
                    const Eci_type&,
                    const Ec_type&,
                    const GirderLength_type&,
                    const SpacingLeftStart_type&,
                    const SpacingRightStart_type&,
                    const SpacingLeftEnd_type&,
                    const SpacingRightEnd_type&,
                    const NumberOfHarpingPoints_type&,
                    const LiftingLocation_type&,
                    const LeadingHaulingLocation_type&,
                    const TrailingHaulingLocation_type&,
                    const StartADimension_type&,
                    const EndADimension_type&,
                    const GirderHaunchVolume_type&,
                    const IsPrismatic_type&,
                    const Area_type&,
                    const Ix_type&,
                    const Iy_type&,
                    const d_type&,
                    const Yt_type&,
                    const Yb_type&,
                    const St_type&,
                    const Sb_type&,
                    const P_type&,
                    const W_type&,
                    const Wtotal_type&,
                    const Area_c_type&,
                    const Ix_c_type&,
                    const Iy_c_type&,
                    const d_c_type&,
                    const Yt_c_type&,
                    const Yb_c_type&,
                    const St_c_type&,
                    const Sb_c_type&,
                    const StrandEccentricityAtEnds_type&,
                    const StrandEccentricityAtHPs_type&,
                    const PrestressingStrandMaterial_type&,
                    const NumberOfStraightStrands_type&,
                    const NumberOfDebondedStraightStrands_type&,
                    const NumberOfExtendedStraightStrands_type&,
                    const NumberOfHarpedStrands_type&,
                    const NumberOfTemporaryStrands_type&,
                    const LongitudinalRebarMaterial_type&,
                    const NumberOfLongitudinalRebarRows_type&,
                    const TransverseReinforcementMaterial_type&,
                    const NumberOfStirrupZones_type&);

    GirderDataType (::std::auto_ptr< GirderKey_type >&,
                    const GirderType_type&,
                    const Fci_type&,
                    const Fc_type&,
                    const Eci_type&,
                    const Ec_type&,
                    const GirderLength_type&,
                    const SpacingLeftStart_type&,
                    const SpacingRightStart_type&,
                    const SpacingLeftEnd_type&,
                    const SpacingRightEnd_type&,
                    const NumberOfHarpingPoints_type&,
                    const LiftingLocation_type&,
                    const LeadingHaulingLocation_type&,
                    const TrailingHaulingLocation_type&,
                    const StartADimension_type&,
                    const EndADimension_type&,
                    const GirderHaunchVolume_type&,
                    const IsPrismatic_type&,
                    const Area_type&,
                    const Ix_type&,
                    const Iy_type&,
                    const d_type&,
                    const Yt_type&,
                    const Yb_type&,
                    const St_type&,
                    const Sb_type&,
                    const P_type&,
                    const W_type&,
                    const Wtotal_type&,
                    const Area_c_type&,
                    const Ix_c_type&,
                    const Iy_c_type&,
                    const d_c_type&,
                    const Yt_c_type&,
                    const Yb_c_type&,
                    const St_c_type&,
                    const Sb_c_type&,
                    const StrandEccentricityAtEnds_type&,
                    const StrandEccentricityAtHPs_type&,
                    ::std::auto_ptr< PrestressingStrandMaterial_type >&,
                    const NumberOfStraightStrands_type&,
                    const NumberOfDebondedStraightStrands_type&,
                    const NumberOfExtendedStraightStrands_type&,
                    const NumberOfHarpedStrands_type&,
                    const NumberOfTemporaryStrands_type&,
                    ::std::auto_ptr< LongitudinalRebarMaterial_type >&,
                    const NumberOfLongitudinalRebarRows_type&,
                    ::std::auto_ptr< TransverseReinforcementMaterial_type >&,
                    const NumberOfStirrupZones_type&);

    GirderDataType (const xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    GirderDataType (const GirderDataType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual GirderDataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~GirderDataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< GirderKey_type > GirderKey_;
    ::xsd::cxx::tree::one< GirderType_type > GirderType_;
    SectionDimensions_sequence SectionDimensions_;
    ::xsd::cxx::tree::one< Fci_type > Fci_;
    ::xsd::cxx::tree::one< Fc_type > Fc_;
    ::xsd::cxx::tree::one< Eci_type > Eci_;
    ::xsd::cxx::tree::one< Ec_type > Ec_;
    ::xsd::cxx::tree::one< GirderLength_type > GirderLength_;
    ::xsd::cxx::tree::one< SpacingLeftStart_type > SpacingLeftStart_;
    ::xsd::cxx::tree::one< SpacingRightStart_type > SpacingRightStart_;
    ::xsd::cxx::tree::one< SpacingLeftEnd_type > SpacingLeftEnd_;
    ::xsd::cxx::tree::one< SpacingRightEnd_type > SpacingRightEnd_;
    ::xsd::cxx::tree::one< NumberOfHarpingPoints_type > NumberOfHarpingPoints_;
    HarpingPoints_sequence HarpingPoints_;
    ::xsd::cxx::tree::one< LiftingLocation_type > LiftingLocation_;
    ::xsd::cxx::tree::one< LeadingHaulingLocation_type > LeadingHaulingLocation_;
    ::xsd::cxx::tree::one< TrailingHaulingLocation_type > TrailingHaulingLocation_;
    ::xsd::cxx::tree::one< StartADimension_type > StartADimension_;
    ::xsd::cxx::tree::one< EndADimension_type > EndADimension_;
    ::xsd::cxx::tree::one< GirderHaunchVolume_type > GirderHaunchVolume_;
    ::xsd::cxx::tree::one< IsPrismatic_type > IsPrismatic_;
    ::xsd::cxx::tree::one< Area_type > Area_;
    ::xsd::cxx::tree::one< Ix_type > Ix_;
    ::xsd::cxx::tree::one< Iy_type > Iy_;
    ::xsd::cxx::tree::one< d_type > d_;
    ::xsd::cxx::tree::one< Yt_type > Yt_;
    ::xsd::cxx::tree::one< Yb_type > Yb_;
    ::xsd::cxx::tree::one< St_type > St_;
    ::xsd::cxx::tree::one< Sb_type > Sb_;
    ::xsd::cxx::tree::one< P_type > P_;
    ::xsd::cxx::tree::one< W_type > W_;
    ::xsd::cxx::tree::one< Wtotal_type > Wtotal_;
    ::xsd::cxx::tree::one< Area_c_type > Area_c_;
    ::xsd::cxx::tree::one< Ix_c_type > Ix_c_;
    ::xsd::cxx::tree::one< Iy_c_type > Iy_c_;
    ::xsd::cxx::tree::one< d_c_type > d_c_;
    ::xsd::cxx::tree::one< Yt_c_type > Yt_c_;
    ::xsd::cxx::tree::one< Yb_c_type > Yb_c_;
    ::xsd::cxx::tree::one< St_c_type > St_c_;
    ::xsd::cxx::tree::one< Sb_c_type > Sb_c_;
    ::xsd::cxx::tree::one< StrandEccentricityAtEnds_type > StrandEccentricityAtEnds_;
    ::xsd::cxx::tree::one< StrandEccentricityAtHPs_type > StrandEccentricityAtHPs_;
    ::xsd::cxx::tree::one< PrestressingStrandMaterial_type > PrestressingStrandMaterial_;
    ::xsd::cxx::tree::one< NumberOfStraightStrands_type > NumberOfStraightStrands_;
    StraightStrandCoordinates_sequence StraightStrandCoordinates_;
    ::xsd::cxx::tree::one< NumberOfDebondedStraightStrands_type > NumberOfDebondedStraightStrands_;
    StraightStrandDebonding_sequence StraightStrandDebonding_;
    ::xsd::cxx::tree::one< NumberOfExtendedStraightStrands_type > NumberOfExtendedStraightStrands_;
    StraightStrandExtensions_sequence StraightStrandExtensions_;
    ::xsd::cxx::tree::one< NumberOfHarpedStrands_type > NumberOfHarpedStrands_;
    HarpedStrandCoordinatesAtEnds_sequence HarpedStrandCoordinatesAtEnds_;
    HarpedStrandCoordinatesAtHP_sequence HarpedStrandCoordinatesAtHP_;
    ::xsd::cxx::tree::one< NumberOfTemporaryStrands_type > NumberOfTemporaryStrands_;
    TemporaryStrandCoordinates_sequence TemporaryStrandCoordinates_;
    ::xsd::cxx::tree::one< LongitudinalRebarMaterial_type > LongitudinalRebarMaterial_;
    ::xsd::cxx::tree::one< NumberOfLongitudinalRebarRows_type > NumberOfLongitudinalRebarRows_;
    LongitudinalRebarRows_sequence LongitudinalRebarRows_;
    ::xsd::cxx::tree::one< TransverseReinforcementMaterial_type > TransverseReinforcementMaterial_;
    ::xsd::cxx::tree::one< NumberOfStirrupZones_type > NumberOfStirrupZones_;
    StirrupZones_sequence StirrupZones_;
    CamberResults_sequence CamberResults_;
  };

  class BridgeDataType: public ::xml_schema::type
  {
    public:
    // LeftRailingType
    // 
    typedef ::xml_schema::string LeftRailingType_type;
    typedef ::xsd::cxx::tree::traits< LeftRailingType_type, wchar_t > LeftRailingType_traits;

    const LeftRailingType_type&
    LeftRailingType () const;

    LeftRailingType_type&
    LeftRailingType ();

    void
    LeftRailingType (const LeftRailingType_type& x);

    void
    LeftRailingType (::std::auto_ptr< LeftRailingType_type > p);

    // RightRailingType
    // 
    typedef ::xml_schema::string RightRailingType_type;
    typedef ::xsd::cxx::tree::traits< RightRailingType_type, wchar_t > RightRailingType_traits;

    const RightRailingType_type&
    RightRailingType () const;

    RightRailingType_type&
    RightRailingType ();

    void
    RightRailingType (const RightRailingType_type& x);

    void
    RightRailingType (::std::auto_ptr< RightRailingType_type > p);

    // SlabFc
    // 
    typedef ::xml_schema::double_ SlabFc_type;
    typedef ::xsd::cxx::tree::traits< SlabFc_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > SlabFc_traits;

    const SlabFc_type&
    SlabFc () const;

    SlabFc_type&
    SlabFc ();

    void
    SlabFc (const SlabFc_type& x);

    // SlabThickness
    // 
    typedef ::xml_schema::double_ SlabThickness_type;
    typedef ::xsd::cxx::tree::traits< SlabThickness_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > SlabThickness_traits;

    const SlabThickness_type&
    SlabThickness () const;

    SlabThickness_type&
    SlabThickness ();

    void
    SlabThickness (const SlabThickness_type& x);

    // OverhangThickness
    // 
    typedef ::xml_schema::double_ OverhangThickness_type;
    typedef ::xsd::cxx::tree::traits< OverhangThickness_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > OverhangThickness_traits;

    const OverhangThickness_type&
    OverhangThickness () const;

    OverhangThickness_type&
    OverhangThickness ();

    void
    OverhangThickness (const OverhangThickness_type& x);

    // NumberOfSpans
    // 
    typedef ::KDOT::IndexType1 NumberOfSpans_type;
    typedef ::xsd::cxx::tree::traits< NumberOfSpans_type, wchar_t > NumberOfSpans_traits;

    const NumberOfSpans_type&
    NumberOfSpans () const;

    NumberOfSpans_type&
    NumberOfSpans ();

    void
    NumberOfSpans (const NumberOfSpans_type& x);

    void
    NumberOfSpans (::std::auto_ptr< NumberOfSpans_type > p);

    // NumberOfGirdersPerSpan
    // 
    typedef ::KDOT::IndexType1 NumberOfGirdersPerSpan_type;
    typedef ::xsd::cxx::tree::sequence< NumberOfGirdersPerSpan_type > NumberOfGirdersPerSpan_sequence;
    typedef xsd::cxx::tree::sequence< NumberOfGirdersPerSpan_type >::iterator NumberOfGirdersPerSpan_iterator;
    typedef xsd::cxx::tree::sequence< NumberOfGirdersPerSpan_type >::const_iterator NumberOfGirdersPerSpan_const_iterator;
    typedef ::xsd::cxx::tree::traits< NumberOfGirdersPerSpan_type, wchar_t > NumberOfGirdersPerSpan_traits;

    const NumberOfGirdersPerSpan_sequence&
    NumberOfGirdersPerSpan () const;

    NumberOfGirdersPerSpan_sequence&
    NumberOfGirdersPerSpan ();

    void
    NumberOfGirdersPerSpan (const NumberOfGirdersPerSpan_sequence& s);

    // SpanLengths
    // 
    typedef ::xml_schema::double_ SpanLengths_type;
    typedef ::xsd::cxx::tree::sequence< SpanLengths_type > SpanLengths_sequence;
    typedef xsd::cxx::tree::sequence< SpanLengths_type >::iterator SpanLengths_iterator;
    typedef xsd::cxx::tree::sequence< SpanLengths_type >::const_iterator SpanLengths_const_iterator;
    typedef ::xsd::cxx::tree::traits< SpanLengths_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > SpanLengths_traits;

    const SpanLengths_sequence&
    SpanLengths () const;

    SpanLengths_sequence&
    SpanLengths ();

    void
    SpanLengths (const SpanLengths_sequence& s);

    // PierData
    // 
    typedef ::KDOT::PierDataType PierData_type;
    typedef ::xsd::cxx::tree::sequence< PierData_type > PierData_sequence;
    typedef xsd::cxx::tree::sequence< PierData_type >::iterator PierData_iterator;
    typedef xsd::cxx::tree::sequence< PierData_type >::const_iterator PierData_const_iterator;
    typedef ::xsd::cxx::tree::traits< PierData_type, wchar_t > PierData_traits;

    const PierData_sequence&
    PierData () const;

    PierData_sequence&
    PierData ();

    void
    PierData (const PierData_sequence& s);

    // GirderData
    // 
    typedef ::KDOT::GirderDataType GirderData_type;
    typedef ::xsd::cxx::tree::sequence< GirderData_type > GirderData_sequence;
    typedef xsd::cxx::tree::sequence< GirderData_type >::iterator GirderData_iterator;
    typedef xsd::cxx::tree::sequence< GirderData_type >::const_iterator GirderData_const_iterator;
    typedef ::xsd::cxx::tree::traits< GirderData_type, wchar_t > GirderData_traits;

    const GirderData_sequence&
    GirderData () const;

    GirderData_sequence&
    GirderData ();

    void
    GirderData (const GirderData_sequence& s);

    // HaunchVolumeForAllSelectedGirders
    // 
    typedef ::xml_schema::double_ HaunchVolumeForAllSelectedGirders_type;
    typedef ::xsd::cxx::tree::traits< HaunchVolumeForAllSelectedGirders_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > HaunchVolumeForAllSelectedGirders_traits;

    const HaunchVolumeForAllSelectedGirders_type&
    HaunchVolumeForAllSelectedGirders () const;

    HaunchVolumeForAllSelectedGirders_type&
    HaunchVolumeForAllSelectedGirders ();

    void
    HaunchVolumeForAllSelectedGirders (const HaunchVolumeForAllSelectedGirders_type& x);

    // HaunchWeightForAllSelectedGirders
    // 
    typedef ::xml_schema::double_ HaunchWeightForAllSelectedGirders_type;
    typedef ::xsd::cxx::tree::traits< HaunchWeightForAllSelectedGirders_type, wchar_t, ::xsd::cxx::tree::schema_type::double_ > HaunchWeightForAllSelectedGirders_traits;

    const HaunchWeightForAllSelectedGirders_type&
    HaunchWeightForAllSelectedGirders () const;

    HaunchWeightForAllSelectedGirders_type&
    HaunchWeightForAllSelectedGirders ();

    void
    HaunchWeightForAllSelectedGirders (const HaunchWeightForAllSelectedGirders_type& x);

    // Constructors.
    //
    BridgeDataType ();

    BridgeDataType (const LeftRailingType_type&,
                    const RightRailingType_type&,
                    const SlabFc_type&,
                    const SlabThickness_type&,
                    const OverhangThickness_type&,
                    const NumberOfSpans_type&,
                    const HaunchVolumeForAllSelectedGirders_type&,
                    const HaunchWeightForAllSelectedGirders_type&);

    BridgeDataType (const xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    BridgeDataType (const BridgeDataType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual BridgeDataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~BridgeDataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< LeftRailingType_type > LeftRailingType_;
    ::xsd::cxx::tree::one< RightRailingType_type > RightRailingType_;
    ::xsd::cxx::tree::one< SlabFc_type > SlabFc_;
    ::xsd::cxx::tree::one< SlabThickness_type > SlabThickness_;
    ::xsd::cxx::tree::one< OverhangThickness_type > OverhangThickness_;
    ::xsd::cxx::tree::one< NumberOfSpans_type > NumberOfSpans_;
    NumberOfGirdersPerSpan_sequence NumberOfGirdersPerSpan_;
    SpanLengths_sequence SpanLengths_;
    PierData_sequence PierData_;
    GirderData_sequence GirderData_;
    ::xsd::cxx::tree::one< HaunchVolumeForAllSelectedGirders_type > HaunchVolumeForAllSelectedGirders_;
    ::xsd::cxx::tree::one< HaunchWeightForAllSelectedGirders_type > HaunchWeightForAllSelectedGirders_;
  };

  class KDOTExport: public ::xml_schema::type
  {
    public:
    // BridgeData
    // 
    typedef ::KDOT::BridgeDataType BridgeData_type;
    typedef ::xsd::cxx::tree::optional< BridgeData_type > BridgeData_optional;
    typedef ::xsd::cxx::tree::traits< BridgeData_type, wchar_t > BridgeData_traits;

    const BridgeData_optional&
    BridgeData () const;

    BridgeData_optional&
    BridgeData ();

    void
    BridgeData (const BridgeData_type& x);

    void
    BridgeData (const BridgeData_optional& x);

    void
    BridgeData (::std::auto_ptr< BridgeData_type > p);

    // version
    // 
    typedef ::xml_schema::decimal version_type;
    typedef ::xsd::cxx::tree::traits< version_type, wchar_t, ::xsd::cxx::tree::schema_type::decimal > version_traits;

    const version_type&
    version () const;

    static version_type
    version_default_value ();

    // Constructors.
    //
    KDOTExport ();

    KDOTExport (const xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    KDOTExport (const KDOTExport& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual KDOTExport*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~KDOTExport ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    BridgeData_optional BridgeData_;
    ::xsd::cxx::tree::one< version_type > version_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace KDOT
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::KDOT::KDOTExport >
  KDOTExport_ (const ::std::wstring& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::KDOT::KDOTExport >
  KDOTExport_ (const ::std::wstring& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::KDOT::KDOTExport >
  KDOTExport_ (const ::std::wstring& uri,
               xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::KDOT::KDOTExport >
  KDOTExport_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::KDOT::KDOTExport >
  KDOTExport_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::KDOT::KDOTExport >
  KDOTExport_ (::std::istream& is,
               xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::KDOT::KDOTExport >
  KDOTExport_ (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::KDOT::KDOTExport >
  KDOTExport_ (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::KDOT::KDOTExport >
  KDOTExport_ (::std::istream& is,
               const ::std::wstring& id,
               xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::KDOT::KDOTExport >
  KDOTExport_ (xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::KDOT::KDOTExport >
  KDOTExport_ (xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::KDOT::KDOTExport >
  KDOTExport_ (xercesc::InputSource& is,
               xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::KDOT::KDOTExport >
  KDOTExport_ (const xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::KDOT::KDOTExport >
  KDOTExport_ (::xml_schema::dom::auto_ptr< xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace KDOT
{
  void
  operator<< (xercesc::DOMElement&, const IndexType1&);

  void
  operator<< (xercesc::DOMAttr&, const IndexType1&);

  void
  operator<< (::xml_schema::list_stream&,
              const IndexType1&);

  void
  operator<< (xercesc::DOMElement&, const GirderKeyType&);

  void
  operator<< (xercesc::DOMElement&, const NamedDoubleType&);

  void
  operator<< (xercesc::DOMElement&, const Point2DType&);

  void
  operator<< (xercesc::DOMElement&, const DebondDataType&);

  void
  operator<< (xercesc::DOMElement&, const StrandExtensionDataType&);

  void
  operator<< (xercesc::DOMElement&, const HarpingPointDataType&);

  void
  operator<< (xercesc::DOMElement&, const PierDataType&);

  void
  operator<< (xercesc::DOMElement&, const PrestressingStrandType&);

  void
  operator<< (xercesc::DOMElement&, const RebarMaterialType&);

  void
  operator<< (xercesc::DOMElement&, const RebarRowInstanceType&);

  void
  operator<< (xercesc::DOMElement&, const StirrupZoneType&);

  void
  operator<< (xercesc::DOMElement&, const CamberResultType&);

  void
  operator<< (xercesc::DOMElement&, const GirderDataType&);

  void
  operator<< (xercesc::DOMElement&, const BridgeDataType&);

  // Serialize to std::ostream.
  //

  void
  KDOTExport_ (::std::ostream& os,
               const ::KDOT::KDOTExport& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

  void
  KDOTExport_ (::std::ostream& os,
               const ::KDOT::KDOTExport& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

  void
  KDOTExport_ (::std::ostream& os,
               const ::KDOT::KDOTExport& x, 
               xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  KDOTExport_ (xercesc::XMLFormatTarget& ft,
               const ::KDOT::KDOTExport& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

  void
  KDOTExport_ (xercesc::XMLFormatTarget& ft,
               const ::KDOT::KDOTExport& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

  void
  KDOTExport_ (xercesc::XMLFormatTarget& ft,
               const ::KDOT::KDOTExport& x, 
               xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  KDOTExport_ (xercesc::DOMDocument& d,
               const ::KDOT::KDOTExport& x,
               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< xercesc::DOMDocument >
  KDOTExport_ (const ::KDOT::KDOTExport& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

  void
  operator<< (xercesc::DOMElement&, const KDOTExport&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SCHEMA_KDOTEXPORTER_HXX
